# # A script to read and assimilate a given input magnetogram

# # Note that until the homebrew issues are fixed, plot using the command:
# # $world -> render({'dev'=>'qt'});

use PDL::AutoLoader;
# use strict;
use warnings;
use PDL;
use PDL::Transform;
use PDL::NiceSlice;
use PDL::Options;
# use PDL::ImageND;
use Flux;
use PDL::IO::Misc;
use File::Path;
$PDL::BIGPDL = 1;
use Time::HiRes qw(clock_gettime);
# use PDL::Graphics::TriD;
$do_download =          0;
$process_magnetogram =  0;
$doPfss =               0;
$makeworld =            0;
$do_relax =             0;
$do_png =               0;
$do_interactive =       0; 
$do_wind_calc =         0;

$N_fluxons = 1000;
$reduction = $ARGV[1] || 3;
$do_steps = 2000;
$relax_threshold = 0.49;
$max_cycles = 5; 
$lim = 2.5;
$lim2 = 7.5;
$do_interactive = 0;
$top_time = clock_gettime();


## TODO make the wind calculation less verbose

#######################################################################################################
## Job Settings #######################################################################################
#######################################################################################################

## Select Magnetogram
$CR = $ARGV[0] || 2193;

# ## Download the magnetogram from JSOC
    $do_download = 1; #1; # $ARGV[2] || 1;
    $reduction = 3; #5; #$ARGV[1] || 5;
# ## Ingest the magnetogram and find the footpoints of the magnetic field lines
    $process_magnetogram = 1;
    $N_fluxons = 750; # TODO Try 750 to 1000 to see how/when it breaks
# ## Run a pfss model in python on the ingested magnetogram
    $doPfss = 1;
## Create the world from the output of the pfss.py code
    $makeworld = 1;
## Top Level Relaxation Instructions
    $do_relax = 1;
        $do_steps = 2000; # relaxation steps between checking stiffness target
        $relax_threshold = 0.49; # stiffness target to stop relaxation
        $max_cycles = 5; 
## Plotting the worlds
    $do_png = 1;
        $lim = 2.5;
        $lim2 = 7.5; # For the wide versions
        $do_interactive = 0; #will open a gnuplot window

## Calculate the Solar Wind
    $do_wind_calc = 1;


#######################################################################################################
## Initialize Environment #############################################################################
#######################################################################################################
print "\n\n\n\nMagnetogram 2 Wind: Indicate a Carrington Rotation and this script will run the entire Flux Pipeline for it.\n\n";

## Set paths
$datdir = "/Users/cgilbert/vscode/Fluxon-Scripts-Gilly/";
push(@PDLLIB,"+".$datdir);
push(@PDLLIB,"+/Users/cgilbert/vscode/Fluxon-Scripts-Gilly");
push(@PDLLIB,"+/Users/cgilbert/vscode/fluxon-mhd/pdl/PDL");
push(@INC, "+/Users/cgilbert/opt");
push(@INC, "/Users/cgilbert/.cpan/build");


#######################################################################################################
## Download the Magnetogram #############################################################################
#######################################################################################################

print "\n**Downloading Magnetograms with Python Script...  ";
# if ($do_download) {
    system("python3 get_magnetograms.py --cr $CR --reduce $reduction --dat_dir $datdir --do_download $do_download") == 0 or (die "Python script returned error $?", exit);
# } else {
    # print "Download Skipped!" }
print "\n";

#######################################################################################################
## Select the Magnetogram #############################################################################
#######################################################################################################

## Select which magnetogram will be used. #####################
## Modify this file to set target
print "**Loading Magnetogram...";
$params_path = $datdir."magnetic_target.params"; 
# print "target = $params_path";
# print " Press ENTER to confirm...\n";

$very_beginning = clock_gettime();
# Read the parameters from the file
open(FH, "<", $params_path) or die "cannot open file: $!"; # This line causes the hang
{
    $header = <FH>;
    $cr = <FH>;     # Carrington Rotation
    $fname = <FH>;  # File Name
    $adapt = <FH>;  # Do adapt?
    $doplot = <FH>; # Do plot?
}
close FH;
$header="0";




# Clean the Input
chomp $cr;
chomp $fname;
chomp $adapt;
chomp $doplot;
# print "Parameters Loaded!\n";
$top_time_2 = clock_gettime();
$top_duration = $top_time_2 - $top_time;

print "Carrington Rotation: $cr";
# print "Magnetogram file: $fname";




#######################################################################################################
## Process the Magnetogram ############################################################################
#######################################################################################################

print "\n**Processing Magnetograms to get Footpoints...";
if ($process_magnetogram){
    ## Read in the Magnetogram #################################
    print "\n";
    print "**Reading Magnetogram...";
    $smag = rfits($datdir.$fname);

    # Extra step for adapt br maps
    if ($adapt) {$smag = $smag(:,:,2)->squeeze;}

    ## Run the fluxon hilbert code ##############################
    print "\n";
    print "**Placing $N_fluxons Fluxons using Hilbert Curves...";
    $floc = fluxon_placement_hilbert($smag, $N_fluxons);




    ## Write to disk ############################################
    print "\n";
    print "**Writing Result to Disk...";
    $out_dir = $datdir.'fluxon/cr'.$cr.'/floc/';
    $out_path = $out_dir .'floc_cr'.$cr.'.dat';
    if (! -d $out_dir ) {mkpath($out_dir) or die "Failed to create directory: $out_dir $!\n";}
    wcols $floc->transpose, $out_path;
}
else {
    print "Skipped!"
}
    print "\n";


#######################################################################################################
## Run the Python PFSS Code ###########################################################################
#######################################################################################################

# print "**PDL Portion Complete!!\n\n";

print "**Calling pfss code (python)...";
if ($doPfss){
    system("python3 get_pfss.py") == 0 or (die "Python script returned error $?", exit);
    print "**Python Portion Complete!!\n\n";
} else {
    print "Skipped!";
}
    print "\n \n";

# Set Ranges of Plots
($xmin_i,$xmax_i,$ymin_i,$ymax_i,$zmin_i,$zmax_i) = (-$lim, $lim, -$lim, $lim, -$lim, $lim);
($xmin_f,$xmax_f,$ymin_f,$ymax_f,$zmin_f,$zmax_f) = (-$lim, $lim, -$lim, $lim, -$lim, $lim);
($xmin_f2,$xmax_f2,$ymin_f2,$ymax_f2,$zmin_f2,$zmax_f2) = (-$lim2, $lim2, -$lim2, $lim2, -$lim2, $lim2);
$range_i = [$xmin_i,$xmax_i,$ymin_i,$ymax_i,$zmin_i,$zmax_i];
$range_f = [$xmin_f,$xmax_f,$ymin_f,$ymax_f,$zmin_f,$zmax_f];
$range_f2 = [$xmin_f2,$xmax_f2,$ymin_f2,$ymax_f2,$zmin_f2,$zmax_f2];

#######################################################################################################
## Generate World from PFSS ###########################################################################
#######################################################################################################

print "**Making the world from the pfss...";
if ($makeworld){
    ## Read python-processed data ###############################
    print "**Loading Open and Closed file line files...";

    ($oflnum, $oflx, $olat, $olon, $orad) = rcols $datdir.'fluxon/cr'.$cr.'/floc/floc_open_cr'.$cr.'.dat';
    ($cflnum, $cflx, $clat, $clon, $crad) = rcols $datdir.'fluxon/cr'.$cr.'/floc/floc_closed_cr'.$cr.'.dat';

    ## Define a blank world ###############################
    @flines = ();
    $world = ();
    $xform = !t_spherical() x t_scale([3.14159/180,3.14159/180,1]);


    ## Generate open fieldlines ####################################
    print "**Generating open fieldlines...";
    ($ofln, $ofl) = rle($oflnum);
    $ofln = $ofln->cumusumover;
    $ofln = append(0, $ofln);
    for my $i(0..nelem($ofl)-1){
        my $flxlat = $olat($ofln($i):$ofln($i+1)-1);
        my $flxlon = $olon($ofln($i):$ofln($i+1)-1);
        my $flxrad = $orad($ofln($i):$ofln($i+1)-1);
        my $open = pdl($flxlon, $flxlat, $flxrad)->transpose;
        ## CL - DOUBLE CHECK THE FLUX DIRECTION HERE
        ## if ($oflx->($ofln($i))<0){
        ##    $open = $open->(:,-1:0:-1);
        ## }
        ## CL - ADD RADIAL EXTENSION HERE
        ## $open = $open->glue(1,$open->(:,-1)->(*11)->transpose)->squeeze;
        ## $open(2,-11:-1) .= pdl(xvals(11)*2+2.5)->transpose;
        if ($oflx->($ofln($i))<0){
            $open = $open->(:,-1:0:-1);
        }
        my $line = ($open)->apply($xform);
        push(@flines,$line->copy);
    }


    ## Generate closed fieldlines  ###################################
    print "**Generating closed fieldlines...";
    ($cfln, $cfl) = rle($cflnum);
    $cfln = $cfln->cumusumover;
    $cfln = append(0, $cfln);
    for my $i(0..nelem($cfl)-1){
        my $flxlat = $clat($cfln($i):$cfln($i+1)-1);
        my $flxlon = $clon($cfln($i):$cfln($i+1)-1);
        my $flxrad = $crad($cfln($i):$cfln($i+1)-1);
        my $closed = pdl($flxlon, $flxlat, $flxrad)->transpose;
        ## CL - DOUBLE CHECK THE FLUX DIRECTION HERE
        if ($cflx->($cfln($i))<0){
            $closed = $closed->(:,-1:0:-1);
        }
        my $line = ($closed)->apply($xform);
        push(@flines,$line->copy);
}


## Generate the world  ############################################
print "**Generating the World...";

    $fbg = make_world_sphere(@flines, {rmax=>21.5});
    $world = str2world($fbg);

    ## Save the initial world state  ###############################
    print "**Saving the World...";

    $world_out_dir = $datdir.'fluxon/cr'.$cr.'/rlx/';
    $world_out_path = $world_out_dir .'cr'.$cr.'.flux';
    if (! -d $world_out_dir ) {mkpath($world_out_dir) or die "Failed to create directory: $world_out_dir $!\n";}
    $world->write_world($world_out_path);

    ## Display ####################################################
    print "**Plotting the World...";
    $world_png_path = $world_out_dir .'cr'.$cr.'.png';
    $world_png_path2 = $world_out_dir .'cr'.$cr.'_wide.png';

    $window00 = gpwin('pngcairo',size=>[9,9], dashed=>0, output=> $world_png_path);
    $world->render( {'window'=>$window00, range=>$range_i});
    $window01 = gpwin('pngcairo',size=>[9,9], dashed=>0, output=> $world_png_path2);
    $world->render( {'window'=>$window01, range=>$range_f2});

    # $world -> render({'dev'=>'qt'});

} else {
    print "Skipped! "
}



#######################################################################################################
## Relax the initial world state ######################################################################
#######################################################################################################

print "\n**Relaxing the World...";

# Select the World
$world_out_dir = $datdir.'fluxon/cr'.$cr.'/rlx/';
$full_world_path = $world_out_dir .'cr'.$cr.'.flux';

if ($do_relax){
    # print "Press Enter to Confirm...";
    $this_world_orig = read_world($full_world_path);
    $this_world_relaxed = read_world($full_world_path);
    $this_world_relaxed->forces('f_pressure_equi2b', 'f_curvature', 'f_vertex4', 'b_eqa'); # NEW
    $this_world_relaxed->{concurrency} = 12;

    # $do_steps = 2000; ################### THIS IS AN OVERRIDE!!!

    $cycle = 0;
    $stiff = 100;
    # # # Begin the Computation!! # # #
    print("for " . $do_steps . " steps\n  \n");

    while ($stiff > $relax_threshold and $cycle < $max_cycles) {
        $cycle = $cycle + 1;

        simple_relaxer($this_world_relaxed,0,$do_steps,{disp_n=>0, movie_n=>50, print_n=>500});

        $h = $this_world_relaxed->fw_stats;
        $stiff = $h->{f_av}/$h->{fs_av}*100;
        # print "\n \nSTIFFNESS IS $stiff, cycle = $cycle\n";
    }
    $stepnum = $cycle * $do_steps;

    print "\nRelaxation Complete in $stepnum Steps";

    # Save the World
    $world_out_dir = $datdir.'fluxon/cr'.$cr.'/rlx/';
    print "\n\n**Saving the World... $world_out_dir";
    if (! -d $world_out_dir ) {mkpath($world_out_dir) or die "Failed to create directory: $world_out_dir $!\n";}

    $out_world=$full_world_path;
    substr($out_world, -5)="_relaxed_$stepnum.flux";
    ## print $out_world;

    $this_world_relaxed->write_world($out_world);

    print "\nWorld saved to $out_world";


} else {
    print "Skipped!\n \n";
    # print"Loading " . $full_world_path;
    $this_world_relaxed = read_world($full_world_path);
    $this_world_orig = $this_world_relaxed;

}


#######################################################################################################
## Plot the world states  #############################################################################
#######################################################################################################

print "\n**Plotting the Worlds...";



if ($do_interactive){
    # Plot to interactive window

    $window1=gpwin('qt',size=>[9,9],dashed=>0, title=>'Initial Conditions');
    $window2=gpwin('qt',size=>[9,9],dashed=>0, title=>'After Relaxation');
    ## Create a sphere with radius 1
    ## $sphere = sphere(50) * 1;
    ## $window2->splot($sphere);
    ## $window2->gnuplot("set style data lines");
    ## $window2->gnuplot("set hidden3d");

    $this_world_orig->render( {'window'=>$window1, range=>$range_i});
    $this_world_relaxed->render({'window'=>$window2, range=>$range_f}); #, hull=>'1'});
    ## use PDL;

    ## my $plot = gpwin();
    ## $plot->gnuplot("set view equal xyz");
    ## $plot->gnuplot("set xrange [-1:1]");
    ## $plot->gnuplot("set yrange [-1:1]");
    ## $plot->gnuplot("set zrange [-1:1]");
}

if($do_png){
    ## Plot to Png

    use PDL::IO::Misc;
    use File::Basename qw(fileparse);

    my $path = $full_world_path;
    my ($filename, $directories, $suffix) = fileparse($path, qr/\.[^.]*/);

    my $new_filename_initial = $directories . $filename . "_initial.png";
    my $new_filename_initial2 = $directories . $filename . "_initial-wide.png";
    my $new_filename_relaxed = $directories . $filename . "_relaxed_$stepnum.png";
    my $new_filename_relaxed2 = $directories . $filename . "_relaxed-wide_$stepnum.png";

    # print "\n";
    # print $new_filename_initial . "\n";
    # print $new_filename_initial2 . "\n";
    # print $new_filename_relaxed . "\n";
    # print $new_filename_relaxed2 . "\n";
    # print "\n";



    $window25=gpwin('pngcairo',size=>[9,9],dashed=>0, output=> $new_filename_initial);
    $window3=gpwin('pngcairo',size=>[9,9],dashed=>0, output=> $new_filename_initial2);
    $window4=gpwin('pngcairo',size=>[9,9],dashed=>0, output=> $new_filename_relaxed );
    $window5=gpwin('pngcairo',size=>[9,9],dashed=>0, output=> $new_filename_relaxed2 );

    ## Create a sphere with radius 1
    # $sphere = sphere(50) * 1;

    # $window25->splot($sphere);
    # $window3->splot($sphere);
    # $window4->splot($sphere);
    # $window5->splot($sphere);

    $this_world_orig->render( {'window'=>$window25, range=>$range_i});
    $this_world_orig->render( {'window'=>$window3, range=>$range_f2});
    $this_world_relaxed->render({'window'=>$window4, range=>$range_f});
    $this_world_relaxed->render({'window'=>$window5, range=>$range_f2});

}

if (not $do_png and not $do_interactive) {
    print "Skipped!\n";
}

## Begin solar wind computation ######################################################################

$this_world_relaxed->update_force(0);
@fluxons = $this_world_relaxed->fluxons;

print "\n<<<<<< Calculating Solar Wind Plasma Parameters >>>>>>\n\n";

if ($do_wind_calc){
    $wind_out_dir = $datdir.'fluxon/cr'.$cr.'/wind';
    if (! -d $wind_out_dir ) {mkpath($wind_out_dir) or die "Failed to create directory: $wind_out_dir $!\n";}

    print "\nRadial B...";
    $out_b = "$wind_out_dir/radial_bmag.dat";

    # print "\n\n\n\n\n $out_b \n\n\n\n\n";

    map_fluxon_b($out_b, \@fluxons);
    system("python3 plot_bmag.py --cr $CR") == 0 or (die "Python script returned error $?", exit);
    print "...done with radial B!";


    print "\n\n\nRadial fr...";
    $out_fr = "$wind_out_dir/radial_fr.dat";
    map_fluxon_fr($out_fr, \@fluxons);
    system("python3 plot_fr.py --cr $CR") == 0 or (die "Python script returned error $?", exit);
    print "...done with radial fr!";

    no warnings 'misc';
    print "\n\n\nRadial wind...";
    $out_wind = "$wind_out_dir/radial_wind.dat";
    map_fluxon_flow_parallel_master($out_wind, \@fluxons);
    system("python3 plot_wind.py --cr $CR") == 0 or (die "Python script returned error $?", exit);
    system("python3 plot_wind_map.py --cr $CR") == 0 or (die "Python script returned error $?", exit);
    print "...done with radial wind!";
    use warnings 'misc'
} else {
    print "            Wind Calculation Skipped!\n \n"
}

$after   = clock_gettime();
$elapsed = $after - $very_beginning + $top_duration;
$round_elapsed = rint($elapsed*10) / 10;

print "\n**Program Complete for CR$cr in $round_elapsed Seconds, press ENTER to exit...\n\n\n";
# <STDIN>;  # Wait for user input


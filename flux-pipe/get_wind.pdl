use pdl_pipe_helper;

sub get_wind{

    my ($this_world_relaxed, $datdir, $batch_name, $CR, $N_actual, $recompute, $n_want, $pythondir) = @_;

    $recompute = 1;

    print "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n";
    print "(pdl) Calculating Solar Wind Plasma Parameters for CR$CR\n";
    print "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n";

    my $do_wind_calc = 0;

    my $wind_out_dir = $datdir."/batches/$batch_name/cr".$CR.'/wind';
    my $prefix = "$wind_out_dir/cr$CR\_f$n_want";
    my $out_b = "$prefix\_radial_bmag.dat";
    my $out_fr = "$prefix\_radial_fr.dat";
    my $out_wind = "$prefix\_radial_wind.dat";
    my $short_out_wind = shorten_path($out_wind);
    my $skipstring = "\n\tWind Calculation Skipped! \n\t\tFound $short_out_wind\n\n";

        # filename = f"cr{CR}_f{args.nwant}_ou{n_open}_radial_wind.png"


    # Make the directory if necessary
    if (! -d $wind_out_dir ) {
        $do_wind_calc = 1;
        mkpath($wind_out_dir) or die "Failed to create directory: $wind_out_dir $!\n";
        }

    # Check if the files exist
    if (! -f $out_b or ! -f $out_fr or ! -f $out_wind or $recompute) {
        $do_wind_calc = 1;
        }

    # Perform the calculation if necessary
    if ($do_wind_calc || $recompute){
        #Initialize the world
        print "\n\tUpdating neighbors...";
        $this_world_relaxed->update_force(0);
        my @fluxons = $this_world_relaxed->fluxons;
        print "Done!\n";

        # Calculate the radial magnetic field
        print "\n\tRadial Magnetic Field (B) Calculation...";
        map_fluxon_b($out_b, \@fluxons);
        print "Done!\n";
        # print "\t\t...done with radial B!";

        # Calculate the radial expansion factor
        print "\n\tRadial Expansion Factor (Fr) Calculation...";
        map_fluxon_fr($out_fr, \@fluxons);
        print "Done!";

        # Calculate the radial wind speed
        no warnings 'misc';
        print "\n\n\tRadial Wind Speed Calculation...\n";
        my $do_wind_map = 0 || $recompute;
        # $do_wind_map=1; #OVERRIDE WIND MAP

        if (! -e $out_wind ) {$do_wind_map=1;}
        if ($do_wind_map){
            map_fluxon_flow_parallel_master($out_wind, \@fluxons);
        } else {
        
            print $skipstring;
        }
        use warnings 'misc'
    } else {
        print $skipstring;
    }

        print "\t\t\t```````````````````````````````\n\n\n\n";

    return $out_b, $out_fr, $out_wind;
}


    # print "\t...\n";
    # system("python3 plot_wind.py --cr $CR --batch $batch_name") == 0 or (die "Python script returned error $?", exit);
    # system("python3 plot_wind_map.py --cr $CR --interp 1 --nact $N_actual --batch $batch_name") == 0 or (die "Python script returned error $?", exit);
    # system("python3 plotting/plot_wind_map_paper_single.py --cr $CR --nact $N_actual --batch $batch_name --dat_dir $datdir") == 0 or (die "Python script returned error $?", exit);
    
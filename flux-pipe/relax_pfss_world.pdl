use PipeHelpers;


sub relax_pfss_world{
    my ($world_out_dir, $full_world_path, $do_relax, $do_steps, $relax_threshold, $max_cycles, $timefile, $n_fluxons_wanted, $N_actual, $datdir, $batch_name, $CR) = @_;

print "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n";
print "(pdl) Relax the Initial World State from PFSS\n";
print "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n";

my $found_file_path = find_file_with_string($world_out_dir);

my $do_the_relax = ($do_relax || not $found_file_path);
# print "\n" . $found_file_path . "\n";
# print $directory;

if ($do_the_relax){
    # print "Press Enter to Confirm...";
    print "\tRelaxing PFSS model...";
    our $this_world_orig = read_world($full_world_path);
    our $this_world_relaxed = $this_world_orig;
    $this_world_relaxed->forces('f_pressure_equi2b', 'f_curvature', 'f_vertex4', 'b_eqa'); # NEW
    $this_world_relaxed->{concurrency} = 12;

    my $cycle = 0;
    my $stiff = 100;
    my $round_stiff = 100;
    my $broken = 0;
    my $stepnum = 0;
    my $flen = 0; 

    # # # Begin the Computation!! # # #
    print("\n \nfor " . $do_steps . " steps\n  \n");

    while ($stiff > $relax_threshold and $cycle < $max_cycles and $broken < 3) {
        $cycle = $cycle + 1;

        simple_relaxer($this_world_relaxed,0,$do_steps,{disp_n=>0, movie_n=>50, print_n=>200});

        # #Trying this new thing
        # $this_world_relaxed->fix_proximity(0.5);
        # $this_world_relaxed->fix_curvature(0.25);

        my $h = $this_world_relaxed->fw_stats;
        $stiff = $h->{f_av}/$h->{fs_av}*100;

        $round_stiff = sprintf("%.2f", $stiff);

        if ($stiff > 99){
            $broken = $broken + 1;
        } else {
            $broken = 0;
        }
        # print "\n \nSTIFFNESS IS $stiff, cycle = $cycle\n";
    
        if ($broken >= 2){
            open my $fhh, ">>", $timefile or die "Cannot open file: $!";
            # printf $fhh, "Success: 0, fluxons: %d, steps: %d, stiff: %f, n_out: %d", $N_actual, $stepnum, $stiff, $flen;
            print $fhh "n_want: $n_fluxons_wanted, n_actual: $N_actual, n_out: $flen, Success: 0, steps: $stepnum, stiff: $round_stiff";
            close $fhh;
            die "\n \n TOO MANY FLUXONS! Reduce N_flux.\n \n \n";

        }
    }
    $stepnum = $cycle * $do_steps;
    print "\nRelaxation Complete in $stepnum Steps \n";

    open my $fhh, ">>", $timefile or die "Cannot open file: $!";
    # printf $fhh, "Success: 1, fluxons: %d, steps: %d, stiff %.2f, n_out: %d", $N_actual, $stepnum, $stiff, $flen;
    print $fhh "n_want: $n_fluxons_wanted, n_actual: $N_actual, n_out: $flen, Success: 1, steps: $stepnum, stiff: $round_stiff, ";
    close $fhh;



    # Save the World
    $world_out_dir = $datdir."$batch_name/cr".$CR.'/rlx/';
    print "\n\n**Saving the World... $world_out_dir";
    if (! -d $world_out_dir ) {mkpath($world_out_dir) or die "Failed to create directory: $world_out_dir $!\n";}


    ## print $out_world;
    my $out_world=$full_world_path;
    substr($out_world, -5)="_relaxed_s$stepnum.flux";
    $this_world_relaxed->write_world($out_world);

    print "\nWorld saved to $out_world";
    return $this_world_orig, $this_world_relaxed

} else {
    print "\n\tSkipped relaxation! Already have relaxed file. Loading...\n \n";
    # # print $found_file_path;

    print"\t\tLoading relaxed world...\n";
    my $this_world_relaxed = read_world($found_file_path);

    # print "\n";
    print"\n\t\tLoading pfss world...\n";
    my $this_world_orig = read_world($full_world_path);

    print "\n\n\tWorlds Successfully loaded!";
    print "\n \n";
    print "\t\t\t```````````````````````````````\n \n\n";
    # print($found_file_path)
    # $this_world_orig = read_world($found_file_path);
    return $this_world_orig, $this_world_relaxed
}




}
1;